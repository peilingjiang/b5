@import '../../../css/root.css';
@import './constants.css';

$picker-size: 110px;
$picker-gap: 3px;

$entry-hover-color: color-mod($dark-white a($hover-op));
$entry-active-color: color-mod($light-grey a($hover-op));

@mixin mask-placement {
  width: calc($picker-size - 2 * $picker-gap);
  /* height: calc(71px - 2 * $picker-gap); */
  height: calc(71px - 3px - $bottom-tiny-height);
  position: absolute;
  top: $picker-gap;
  left: $picker-gap;
  pointer-events: none;
}

@mixin too-light-outline($this-radius, $this-color) {
  content: '';
  display: block;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  border-radius: $this-radius;
  border: 1px solid $this-color;
  pointer-events: none;
}

.blockFill {
  &.interacting {
    z-index: 90007 !important;
  }

  .colorPickerWidth {
    width: $picker-size;
  }

  .colorPicker {
    display: flex;
    width: $picker-size;
    height: 71px;
    text-align: center;

    .strokeMaskDiv {
      @include mask-placement();
      background-color: #fff;
      border-radius: $tiny-tiny-radius;
      z-index: -1;
    }

    .strokeMaskDivTooLight {
      @include mask-placement();
      border-radius: $tiny-tiny-radius;
      border: 1px solid $hover-grey;
    }

    .nodes {
      width: 100%;

      .count1 {
        width: 100%;
      }
    }

    .pickerEntry {
      background-color: color-mod(#fff a($hover-op));
      height: fit-content;
      width: calc($picker-size - 2 * $picker-gap);
      border-radius: $tiny-tiny-radius;
      margin: $picker-gap $picker-gap 0 $picker-gap;

      .entryText {
        line-height: 150%;
        font-size: $small;
        font-weight: $light;
        color: $dark-grey;
        padding: 4px 0 3px;

        .pickerName {
          color: $black;
          font-weight: $medium;
          padding-right: 3px;
        }
      }

      &:hover:not(.disabledComponent) {
        cursor: pointer;
        background-color: $entry-hover-color;
      }

      &:active:not(.disabledComponent) {
        background-color: $entry-active-color;
      }
    }

    .pickerCover {
      position: fixed;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
    }

    .sketchPicker {
      position: absolute;
      top: 0;
      left: 0;
      margin-left: calc($picker-size + 5px);
      cursor: auto;

      .sketch-picker {
        /* box-sizing: border-box !important; */
        border-radius: $tiny-radius !important;
        /* border: $regular-border !important; */
        box-shadow:
          0 0 0 1px $hover-grey,
          $high-shadow !important;
      }

      input {
        width: 100% !important; /* * ? */
      }
    }

    &.blockTooLight {
      &:after {
        @include too-light-outline($tiny-radius, $hover-grey);
      }
    }
  }
}
